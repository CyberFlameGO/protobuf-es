// Copyright 2021-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v0.1.1 with parameter "ts_nocheck=false,target=js+dts"
// @generated from file extra/proto2-extend.proto (package spec, syntax proto2)
/* eslint-disable */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto2} from "@bufbuild/protobuf";

/**
 * @generated from message spec.Proto2Extendee
 */
export declare class Proto2Extendee extends Message<Proto2Extendee> {
  /**
   * @generated from field: optional string foo = 1;
   */
  foo?: string;

  /**
   * if we just generate like regular fields, this will totally clash with Proto2Extendee.foo
   *
   * @generated from extension spec.foo
   */
  "spec.foo"?: string;

  /**
   * @generated from extension spec.bar
   */
  "spec.bar": string[];

  constructor(data?: PartialMessage<Proto2Extendee>);

  static readonly runtime: typeof proto2;
  static readonly typeName = "spec.Proto2Extendee";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Proto2Extendee;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Proto2Extendee;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Proto2Extendee;

  static equals(a: Proto2Extendee | PlainMessage<Proto2Extendee> | undefined, b: Proto2Extendee | PlainMessage<Proto2Extendee> | undefined): boolean;
}

